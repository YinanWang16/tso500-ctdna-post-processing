{
    "$graph": [
        {
            "class": "CommandLineTool",
            "hints": [
                {
                    "dockerPull": "ubuntu:latest",
                    "class": "DockerRequirement"
                },
                {
                    "class": "ResourceRequirement",
                    "https://platform.illumina/rdf/ica/resources": {
                        "tier": "standard",
                        "type": "standard",
                        "size": "small"
                    }
                }
            ],
            "requirements": [
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "ShellCommandRequirement"
                }
            ],
            "id": "#gunzip.cwl",
            "label": "gunzip",
            "doc": "gunzip files",
            "baseCommand": [
                "gunzip"
            ],
            "arguments": [
                "-c",
                {
                    "valueFrom": "$(\"> \" + inputs.gz_file.nameroot)",
                    "shellQuote": false,
                    "position": 1
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "inputBinding": {
                        "position": 0
                    },
                    "id": "#gunzip.cwl/gz_file"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.gz_file.nameroot)"
                    },
                    "id": "#gunzip.cwl/unzipped_file"
                }
            ],
            "https://schema.org/author": [
                {
                    "class": "https://schema.org/Person",
                    "https://schema.org/name": "Yinan Wang",
                    "https://schema.org/email": "mailto:ywang16@illumina.com"
                }
            ],
            "$namespaces": {
                "s": "https://schema.org/"
            }
        },
        {
            "class": "CommandLineTool",
            "id": "#mosdepth-make-thresholds-bed.cwl",
            "label": "mosdepth",
            "doc": "use mosdepth to make threshold.bed file for calculating Failed_Exon_coverage_QC.txt",
            "hints": [
                {
                    "dockerPull": "quay.io/biocontainers/mosdepth:0.3.1--ha7ba039_0",
                    "class": "DockerRequirement"
                },
                {
                    "class": "ResourceRequirement",
                    "https://platform.illumina/rdf/ica/resources": {
                        "tier": "standard",
                        "type": "standard",
                        "size": "medium",
                        "coreMin": 4,
                        "ramMin": 2048
                    }
                }
            ],
            "requirements": [
                {
                    "expressionLib": [
                        "var get_output_prefix = function(){ /* Get inputs.output_prefix value, fall back to inputs.bam_or_cram nameroot */ if (inputs.output_prefix !== null) { return inputs.output_prefix; } return inputs.bam_or_cram.nameroot; }"
                    ],
                    "class": "InlineJavascriptRequirement"
                }
            ],
            "baseCommand": [
                "mosdepth"
            ],
            "arguments": [
                {
                    "valueFrom": "$(get_output_prefix())",
                    "position": 4
                }
            ],
            "inputs": [
                {
                    "type": "File",
                    "doc": "the alignment file for which to calculate depth.",
                    "inputBinding": {
                        "position": 5
                    },
                    "secondaryFiles": ".bai",
                    "id": "#mosdepth-make-thresholds-bed.cwl/bam_or_cram"
                },
                {
                    "type": "boolean",
                    "doc": "don't output per-base depth. skipping this output will speed execution\nsubstantially. prefer quantized or thresholded values if possible.\n",
                    "default": true,
                    "inputBinding": {
                        "prefix": "-n",
                        "position": 3
                    },
                    "id": "#mosdepth-make-thresholds-bed.cwl/no_per_base"
                },
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "id": "#mosdepth-make-thresholds-bed.cwl/output_prefix"
                },
                {
                    "type": "File",
                    "doc": "TSO manifest bed file",
                    "inputBinding": {
                        "prefix": "-b",
                        "position": 1
                    },
                    "id": "#mosdepth-make-thresholds-bed.cwl/target_region_bed"
                },
                {
                    "type": "int",
                    "doc": "number of BAM decompression threads [default: 0]\n",
                    "default": 4,
                    "inputBinding": {
                        "prefix": "-t",
                        "position": 0
                    },
                    "id": "#mosdepth-make-thresholds-bed.cwl/threads"
                },
                {
                    "type": {
                        "type": "array",
                        "items": "int"
                    },
                    "doc": "for each interval in --by, write number of bases covered by at\nleast threshold bases.\n",
                    "default": [
                        100,
                        250,
                        500,
                        750,
                        1000,
                        1500,
                        2000,
                        2500,
                        3000,
                        4000,
                        5000,
                        8000,
                        10000
                    ],
                    "inputBinding": {
                        "prefix": "-T",
                        "itemSeparator": ",",
                        "position": 2
                    },
                    "id": "#mosdepth-make-thresholds-bed.cwl/threshold_bases"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.bam_or_cram.nameroot).thresholds.bed.gz"
                    },
                    "id": "#mosdepth-make-thresholds-bed.cwl/thresholds_bed_gz"
                }
            ],
            "https://schema.org/author": [
                {
                    "class": "https://schema.org/Person",
                    "https://schema.org/name": "Yinan Wang",
                    "https://schema.org/email": "mailto:ywang16@illumina.com"
                }
            ]
        },
        {
            "class": "CommandLineTool",
            "label": "make_coverage_QC.py",
            "hints": [
                {
                    "dockerPull": "umccr/alpine_pandas:latest-cwl",
                    "class": "DockerRequirement"
                },
                {
                    "class": "ResourceRequirement",
                    "https://platform.illumina/rdf/ica/resources": {
                        "tier": "standard",
                        "type": "standard",
                        "size": "medium"
                    }
                }
            ],
            "requirements": [
                {
                    "listing": [
                        {
                            "entryname": "thresholds-bed-to-coverage-QC.py",
                            "entry": "#!/usr/bin/env python3\n\nimport pandas as pd\nimport re\nimport argparse\nfrom os import path\n\ndef get_args():\n    \"\"\" Get arguments for the command \"\"\"\n    parser = argparse.ArgumentParser(description='From mosdepth output \"shreshold.bed\" to generate \"Failed_Exon_coverage_QC.txt\" for PierianDx CGW')\n\n    parser.add_argument('-i', '--input-bed', required=True,\n                        help='Mosdepth output file \"threshold.bed\", ungzipped')\n    return parser.parse_args()\n\ndef main():\n    \"\"\" Generate Failed_Exon_coverage_QC.txt \"\"\"\n    args = get_args()\n    sample_id = path.basename(args.input_bed).split('.')[0]\n    coverage_csv = sample_id + '_Failed_Exon_coverage_QC.txt'\n    with open(args.input_bed) as b:\n        data = pd.read_csv(b, sep='\\t', header=0)\n    # define header of the file\n    header = 'Level 2: 100x coverage for > 50% of positions was not achieved for the targeted exon regions listed below:\\n'\n    header += 'index\\tgene\\ttranscript_acc\\texon_id\\tGE100\\tGE250\\n'\n    with open(coverage_csv, 'w') as o:\n        o.write(header)\n        for i in range(len(data)):\n            exon_length = data.loc[i, 'end'] - data.loc[i, 'start']\n            PCT100 = data.loc[i, '100X'] / exon_length * 100\n            index = data.loc[i, 'region']\n            name = index.split('_')\n            if (len(name) < 3): # regions other than exons\n                continue\n            gene, exon_id, transcript_acc = index.split('_')\n            if PCT100 < 50 and re.match('^NM', transcript_acc):\n                PCT250 = data.loc[i, '250X'] / exon_length * 100\n                try:\n                    exon_id = int(re.sub('Exon', '', exon_id))\n                except:\n                    exon_id = int(re.sub('Intron', '', exon_id))\n                o.write('%s\\t%s\\t%s\\t%d\\t%.1f\\t%.1f\\n' % (index, gene, transcript_acc, exon_id, PCT100, PCT250))\nmain()\n"
                        }
                    ],
                    "class": "InitialWorkDirRequirement"
                },
                {
                    "class": "InlineJavascriptRequirement"
                }
            ],
            "baseCommand": [
                "python3",
                "thresholds-bed-to-coverage-QC.py"
            ],
            "inputs": [
                {
                    "type": "File",
                    "label": "thresholds.bed",
                    "doc": "mosdepth output thresholds.bed, ungzipped",
                    "inputBinding": {
                        "prefix": "-i",
                        "position": 0
                    },
                    "id": "#mosdepth-thresholds-bed-to-coverage-QC-step.cwl/thresholds_bed"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.thresholds_bed.nameroot.split('.')[0])_Failed_Exon_coverage_QC.txt"
                    },
                    "id": "#mosdepth-thresholds-bed-to-coverage-QC-step.cwl/coverage_QC"
                }
            ],
            "id": "#mosdepth-thresholds-bed-to-coverage-QC-step.cwl",
            "https://schema.org/author": [
                {
                    "class": "https://schema.org/Person",
                    "https://schema.org/name": "Yinan Wang",
                    "https://schema.org/email": "mailto:ywang16@illumina.com"
                }
            ]
        },
        {
            "class": "CommandLineTool",
            "id": "#mosdepth-thresholds-bed-to-target-region-coverage.cwl",
            "label": "target_region_coverage_metrics.py",
            "doc": "from mosdepth output 'thresholds.bed.gz' to make consensus reads coverage metrics\non target regions.\n",
            "hints": [
                {
                    "dockerPull": "umccr/alpine_pandas:latest-cwl",
                    "class": "DockerRequirement"
                },
                {
                    "class": "ResourceRequirement",
                    "https://platform.illumina/rdf/ica/resources": {
                        "tier": "standard",
                        "type": "standard",
                        "size": "medium"
                    }
                }
            ],
            "requirements": [
                {
                    "listing": [
                        {
                            "entryname": "target_region_coverage_metrics.py",
                            "entry": "#!/usr/bin/env python3\n\nimport pandas as pd\nfrom os import path\nimport argparse\n\ndef get_args():\n    \"\"\" Get arguments for the command \"\"\"\n    parser = argparse.ArgumentParser(description='From mosdepth threshold.bed to make consensus reads coverage on target region (TargetRegionCoverage.tsv)')\n\n    # add arguments\n    parser.add_argument('-i', '--input-bed', required=True,\n                        help='Mosdepth output file \"threshold.bed\", ungzipped')\n\n    parser.add_argument('-p', '--prefix', required=False,\n                        help='prefix of output TargetRegionCoverage.tsv')\n    return parser.parse_args()\n\ndef main():\n    \"\"\" Calculate consensus reads coverage metrics \"\"\"\n    args = get_args()\n    # thresholds_bed = args.input_bed\n    # sample_id = path.basename(thresholds_bed).split('.')[0]\n    if args.prefix:\n      output_tsv = args.prefix + '.TargetRegionCoverage.tsv'\n    else:\n      output_tsv = path.basename(args.input_bed).split('.')[0] + '.TargetRegionCoverage.tsv'\n\n    # open threshold.bed file and load to dataframe\n    with open(args.input_bed, 'rt') as i:\n        data = pd.read_csv(i, sep='\\t', header=0)\n    # calculate total legnth of targeted region\n    length_sum = pd.DataFrame.sum(data['end'] - data['start'])\n    # write results to file\n    with open(output_tsv, 'w') as o:\n        o.write('ConsensusReadDepth\\tBasePair\\tPercentage\\n')\n        o.write('TargetRegion\\t' + str(length_sum) + '\\t100%\\n')\n        for col in data.columns[4:]:\n            threshold_pass_nt = pd.DataFrame.sum(data[col])\n            percentage = format(threshold_pass_nt * 100 / length_sum, '.2f')\n            o.write(col + '\\t' + str(threshold_pass_nt) + '\\t' +  str(percentage) + '%' + '\\n')\nmain()\n"
                        }
                    ],
                    "class": "InitialWorkDirRequirement"
                },
                {
                    "class": "InlineJavascriptRequirement"
                }
            ],
            "baseCommand": [
                "python3",
                "target_region_coverage_metrics.py"
            ],
            "inputs": [
                {
                    "type": [
                        "null",
                        "string"
                    ],
                    "inputBinding": {
                        "prefix": "-p",
                        "position": 1
                    },
                    "id": "#mosdepth-thresholds-bed-to-target-region-coverage.cwl/sample_id"
                },
                {
                    "type": "File",
                    "inputBinding": {
                        "prefix": "-i",
                        "position": 0
                    },
                    "id": "#mosdepth-thresholds-bed-to-target-region-coverage.cwl/thresholds_bed"
                }
            ],
            "outputs": [
                {
                    "type": "File",
                    "outputBinding": {
                        "glob": "$(inputs.thresholds_bed.nameroot.split('.')[0]).TargetRegionCoverage.tsv"
                    },
                    "id": "#mosdepth-thresholds-bed-to-target-region-coverage.cwl/target_region_coverage_metrics"
                }
            ],
            "https://schema.org/author": [
                {
                    "class": "https://schema.org/Person",
                    "https://schema.org/name": "Yinan Wang",
                    "https://schema.org/email": "mailto:ywang16@illumina.com"
                }
            ],
            "https://schema.org/codeRepository": "https://github.com/YinanWang16/tso500-ctdna-post-processing"
        },
        {
            "class": "Workflow",
            "id": "#main",
            "label": "mosdepth_to_coverage_QC",
            "doc": "Input is mosdepth output 'threshold.bed.gz'.\nOutputs are 'Failed_Exon_coverage_QC.txt' and 'target_region_coverage_metrics'.\n",
            "requirements": [
                {
                    "class": "StepInputExpressionRequirement"
                },
                {
                    "class": "InlineJavascriptRequirement"
                },
                {
                    "class": "MultipleInputFeatureRequirement"
                }
            ],
            "inputs": [
                {
                    "label": "Sample_ID.bam",
                    "doc": "The path to the raw alignment bam file",
                    "type": "File",
                    "secondaryFiles": ".bai",
                    "id": "#bam_file"
                },
                {
                    "label": "TST500C_manifest.bed",
                    "doc": "TSO manifest bed file",
                    "type": "File",
                    "id": "#tso_manifest_bed"
                }
            ],
            "outputs": [
                {
                    "label": "Sample_ID_Failed_Exon_coverage_QC.txt",
                    "doc": "make Failed_Exon_coverage_QC.txt for PierianDx CGW",
                    "type": "File",
                    "outputSource": "#/coverage_QC/coverage_QC",
                    "id": "#exon_coverage_qc"
                },
                {
                    "label": "Sample_ID.TargetRegionCoverage.tsv",
                    "doc": "Consensus reads converage on TSO targeted regions.",
                    "type": "File",
                    "outputSource": "#/coverage_metrics/target_region_coverage_metrics",
                    "id": "#target_region_coverage_metrics"
                }
            ],
            "steps": [
                {
                    "run": "#mosdepth-thresholds-bed-to-coverage-QC-step.cwl",
                    "label": "make_coverage_QC.py",
                    "in": [
                        {
                            "source": "#/gunzip/unzipped_file",
                            "id": "#coverage_QC/thresholds_bed"
                        }
                    ],
                    "out": [
                        "#/coverage_QC/coverage_QC"
                    ],
                    "id": "#coverage_QC"
                },
                {
                    "run": "#mosdepth-thresholds-bed-to-target-region-coverage.cwl",
                    "label": "target_region_coverage_metrics.py",
                    "in": [
                        {
                            "source": "#/gunzip/unzipped_file",
                            "id": "#coverage_metrics/thresholds_bed"
                        }
                    ],
                    "out": [
                        "#/coverage_metrics/target_region_coverage_metrics"
                    ],
                    "id": "#coverage_metrics"
                },
                {
                    "run": "#gunzip.cwl",
                    "label": "gunzip",
                    "in": [
                        {
                            "source": "#/mosdepth/thresholds_bed_gz",
                            "id": "#gunzip/gz_file"
                        }
                    ],
                    "out": [
                        "#/gunzip/unzipped_file"
                    ],
                    "id": "#gunzip"
                },
                {
                    "run": "#mosdepth-make-thresholds-bed.cwl",
                    "label": "mosdepth",
                    "in": [
                        {
                            "source": "#bam_file",
                            "id": "#mosdepth/bam_or_cram"
                        },
                        {
                            "valueFrom": "$(inputs.bam_or_cram.nameroot)",
                            "id": "#mosdepth/output_prefix"
                        },
                        {
                            "source": "#tso_manifest_bed",
                            "id": "#mosdepth/target_region_bed"
                        }
                    ],
                    "out": [
                        "#/mosdepth/thresholds_bed_gz"
                    ],
                    "id": "#mosdepth"
                }
            ],
            "https://schema.org/author": [
                {
                    "class": "https://schema.org/Person",
                    "https://schema.org/name": "Yinan Wang",
                    "https://schema.org/email": "mailto:ywang16@illumina.com"
                }
            ],
            "https://schema.org/codeRepository": "https://github.com/YinanWang16/tso500-ctdna-post-processing"
        }
    ],
    "cwlVersion": "v1.0"
}