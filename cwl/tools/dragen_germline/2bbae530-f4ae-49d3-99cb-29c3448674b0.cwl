#!/usr/bin/env cwl-runner

# (Re)generated by BlueBee Platform

$namespaces:
  bb: http://bluebee.com/cwl/
  ilmn-tes: http://platform.illumina.com/rdf/iap/
cwlVersion: cwl:v1.0
class: CommandLineTool
bb:toolVersion: '1'
requirements:
- class: DockerRequirement
  dockerPull: 732432096938.dkr.ecr.us-east-1.amazonaws.com/dragen-bluebee:3.8.4-03162021
- class: InlineJavascriptRequirement
- class: DockerRequirement
  dockerPull: 732432096938.dkr.ecr.us-east-1.amazonaws.com/dragen-bluebee:3.8.4-1.0
hints:
- class: ResourceRequirement
  ilmn-tes:resources:
    type: fpga
    size: medium
- class: ResourceRequirement
  ilmn-tes:resources:
    tier: standard
    type: fpga
    size: medium
label: DRAGEN Germline Built-In License
doc: The DRAGEN Germline tool aligns and optionally variant calls from FASTQ or BAM
  inputs.  Multiple samples can be provided to run all samples in batch mode on a
  single node.
inputs:
  fastqs:
    type:
    - type: array
      items: File
    - 'null'
    doc: FASTQ files to be provided as input.  FASTQ files must have "_LXXX" in its
      filename to denote the lane and "_RX" to denote the read number.  If either
      is omitted, lane 1 and read 1 will be used in the FASTQ list. The tool will
      automatically write a FASTQ list from all files provided and process each sample
      in batch.
    label: FASTQ files
    inputBinding:
      prefix: --fastqs
  bams:
    type:
    - type: array
      items: File
    - 'null'
    doc: BAM files to be provided as input.  The tool will process all BAMs to optionally
      perform realignment and variant calling.  Index files are only required when
      SV calling is enabled and realignment is disabled.
    label: BAM files
    secondaryFiles:
    - .bai
    inputBinding:
      prefix: --bam-batch
  reference:
    type: File
    label: Reference genome
    inputBinding:
      prefix: --ref-tar
  sample_sex:
    type:
    - string
    - 'null'
    label: Sample sex (male/female)
    inputBinding:
      prefix: --sample-sex
  enable_map_align:
    type:
    - string
    - 'null'
    label: Enable map align (true/false)
    inputBinding:
      prefix: --enable-map-align
  enable_map_align_output:
    type:
    - string
    - 'null'
    label: Enable map align output (true/false)
    inputBinding:
      prefix: --enable-map-align-output
  output_format:
    type:
    - string
    - 'null'
    label: Output format (BAM/CRAM/SAM)
    inputBinding:
      prefix: --output-format
  enable_duplicate_marking:
    type:
    - string
    - 'null'
    label: Enable duplicate marking (true/false)
    inputBinding:
      prefix: --enable-duplicate-marking
  enable_variant_caller:
    type:
    - string
    - 'null'
    label: Enable small variant calling (true/false)
    inputBinding:
      prefix: --enable-variant-caller
  vc_emit_ref_confidence:
    type:
    - string
    - 'null'
    label: Emit Ref Confidence (GVCF/BP_RESOLUTION)
    inputBinding:
      prefix: --vc-emit-ref-confidence
  enable_cnv:
    type:
    - string
    - 'null'
    doc: Either CNV self-normalization must be enabled or a panel of normals must
      be provided to perform CNV calling.
    label: Enable CNV calling (true/false)
    inputBinding:
      prefix: --enable-cnv
  cnv_enable_self_normalization:
    type:
    - string
    - 'null'
    label: Enable CNV self-normalization (true/false)
    inputBinding:
      prefix: --cnv-enable-self-normalization
  cnv_normals_files:
    type:
    - type: array
      items: File
      inputBinding:
        prefix: --cnv-normals-file
    - 'null'
    doc: Panel of normals for CNV calling.  This must be provided if self-normalization
      is disabled.
    label: Panel of normals
  cnv_normals_tar:
    type:
    - File
    - 'null'
    doc: If the number of normals files exceeds the limit, the user can tar it with
      the -C option and input the tar here.
    label: TAR archive of panel of normals
    inputBinding:
      prefix: --cnv-normals-tar
  enable_sv:
    type:
    - string
    - 'null'
    doc: Map align output must be enabled to perform SV calling.
    label: Enable SV calling (true/false)
    inputBinding:
      prefix: --enable-sv
  repeat_genotype_enable:
    type:
    - string
    - 'null'
    label: Enable repeat genotyping (true/false)
    inputBinding:
      prefix: --repeat-genotype-enable
  qc_coverage_region_beds:
    type:
    - type: array
      items: File
    - 'null'
    doc: Up to 3 BED files can be provided for the --qc-coverage-bed-n option.  Corresponding
      --qc-coverage options can be provided in the additional_args field.
    label: QC Coverage Region BED Files (up to 3)
  additional_args:
    type:
    - string
    - 'null'
    doc: Additional DRAGEN args that don't require file inputs can be provided here.
      e.g. "--gc-metrics-enable true --qc-coverage-filters-1 mapq<20,bq<20 --qc-coverage-reports-1
      cov_report callability"
    label: Additional DRAGEN args
outputs:
  bam_files:
    type:
    - type: array
      items: File
    - 'null'
    label: BAM Files
    secondaryFiles:
    - .bai
    outputBinding:
      glob:
      - '*.bam'
  small_var_vcf_files:
    type:
    - type: array
      items: File
    - 'null'
    label: Small Variant VCF Files
    secondaryFiles:
    - .tbi
    outputBinding:
      glob:
      - '*.hard-filtered.vcf.gz'
  small_var_gvcf_files:
    type:
    - type: array
      items: File
    - 'null'
    label: Small Variant GVCF Files
    secondaryFiles:
    - .tbi
    outputBinding:
      glob:
      - '*.hard-filtered.gvcf.gz'
  cnv_vcf_files:
    type:
    - type: array
      items: File
    - 'null'
    label: CNV VCF Files
    secondaryFiles:
    - .tbi
    outputBinding:
      glob:
      - '*.cnv.vcf.gz'
  tn_tsvs:
    type:
    - type: array
      items: File
    - 'null'
    label: CNV .tn.tsv Files
    outputBinding:
      glob:
      - '*.tn.tsv'
  sv_vcf_files:
    type:
    - type: array
      items: File
    - 'null'
    label: SV VCF Files
    secondaryFiles:
    - .tbi
    outputBinding:
      glob:
      - '*.sv.vcf.gz'
  repeats_vcf_files:
    type:
    - type: array
      items: File
    - 'null'
    label: Repeats VCF Files
    secondaryFiles:
    - .tbi
    outputBinding:
      glob:
      - '*.repeats.vcf.gz'
  output_directory:
    type: Directory
    label: Output Directory
    outputBinding:
      glob:
      - $(runtime.outdir)
arguments:
- /python/batch_runner.py
- valueFrom: |-
    ${
      if (inputs.additional_args)
        return inputs.additional_args.split(' ')
      else
        return []
    }
- valueFrom: |-
    ${
      var args = []
      if (inputs.qc_coverage_region_beds && inputs.qc_coverage_region_beds.length) {
        for (var i = 1; i <= inputs.qc_coverage_region_beds.length; i++) {
          args.push('--qc-coverage-region-' + i)
          args.push(inputs.qc_coverage_region_beds[i-1].path)
        }
      }
      return args
    }
baseCommand:
- python3.9
